"""
Validador Temporal Inteligente - Reconoce m√∫ltiples formatos de tiempo

‚úÖ NUEVO: Validador especializado para per√≠odos de entrenamiento
‚úÖ SOPORTE: M√∫ltiples idiomas (espa√±ol e ingl√©s)
‚úÖ FLEXIBLE: Reconoce abreviaciones, plurales, may√∫sculas/min√∫sculas
‚úÖ NORMALIZACI√ìN: Convierte entrada a formato est√°ndar

Ejemplos de entrada soportados:
- 1 mes, 1 m, 1 M, 1 mes, 1 MESES, 1 month, 1 mo ‚Üí "1 mes"
- 2 a√±os, 2 a√±o, 2 a, 2 A, 2 A√ëOS, 2 year, 2 years, 2 y, 2 Y ‚Üí "2 a√±os"  
- 3 semanas, 3 semana, 3 s, 3 S, 3 week, 3 weeks, 3 w ‚Üí "3 semanas"
- 4 d√≠as, 4 d√≠a, 4 d, 4 D, 4 day, 4 days ‚Üí "4 d√≠as"
"""

import re
from typing import Optional, Tuple
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit.document import Document

class TrainingPeriodValidator(Validator):
    """
    ‚úÖ Validador inteligente para per√≠odos de entrenamiento.
    
    Reconoce m√∫ltiples formatos temporales y los normaliza a formato est√°ndar.
    Permite campo vac√≠o (opcional) y valida rangos razonables.
    """
    
    def __init__(self):
        super().__init__()
        
        # Diccionarios de mapeo para normalizaci√≥n
        self.time_units_es = {
            # D√≠as
            'd√≠a': 'd√≠a', 'dias': 'd√≠as', 'd√≠a': 'd√≠a', 'd√≠as': 'd√≠as',
            'd': 'd√≠a', 'D': 'd√≠a',
            
            # Semanas  
            'semana': 'semana', 'semanas': 'semanas',
            's': 'semana', 'S': 'semana',
            
            # Meses
            'mes': 'mes', 'meses': 'meses',
            'm': 'mes', 'M': 'mes',
            
            # A√±os
            'a√±o': 'a√±o', 'anos': 'a√±os', 'a√±o': 'a√±o', 'a√±os': 'a√±os',
            'a': 'a√±o', 'A': 'a√±o'
        }
        
        self.time_units_en = {
            # Days
            'day': 'd√≠a', 'days': 'd√≠as',
            
            # Weeks
            'week': 'semana', 'weeks': 'semanas', 
            'w': 'semana', 'W': 'semana',
            
            # Months
            'month': 'mes', 'months': 'meses',
            'mo': 'mes', 'MO': 'mes', 'Mon': 'mes',
            
            # Years
            'year': 'a√±o', 'years': 'a√±os',
            'y': 'a√±o', 'Y': 'a√±o', 'yr': 'a√±o', 'yrs': 'a√±os'
        }
        
        # Patrones regex para reconocer formatos
        self.patterns = [
            # N√∫meros con unidades (ej: "2 a√±os", "3 semanas")
            r'^(\d+(?:\.\d+)?)\s*([a-zA-Z√±√ë]+)$',
            
            # Solo n√∫meros (asumimos meses por defecto)
            r'^(\d+(?:\.\d+)?)$',
            
            # Casos especiales
            r'^0\s*-\s*(empezando|starting|comenzando)$',
            r'^(empezando|starting|comenzando)$'
        ]
    
    def validate(self, document: Document) -> None:
        """Validaci√≥n s√≠ncrona requerida por Validator"""
        text = document.text.strip()
        
        if not text:
            return  # Campo opcional
        
        normalized = self.normalize_period(text)
        if not normalized:
            raise ValidationError(
                message='Formato no reconocido. Ejemplos v√°lidos: "2 meses", "3 semanas", "1 a√±o", "2 m", "3 weeks"',
                cursor_position=len(text)
            )
    
    async def validate_async(self, document: Document) -> None:
        """Validaci√≥n async requerida por prompt_toolkit"""
        self.validate(document)
    
    def normalize_period(self, text: str) -> Optional[str]:
        """
        Normaliza per√≠odo de entrenamiento a formato est√°ndar espa√±ol.
        
        Args:
            text: Entrada del usuario (ej: "2 months", "3 s", "1 a√±o")
            
        Returns:
            str: Formato normalizado (ej: "2 meses", "3 semanas", "1 a√±o")
            None: Si no se puede normalizar
        """
        text = text.lower().strip()
        
        # Casos especiales: empezando
        if any(word in text for word in ['empezando', 'starting', 'comenzando']):
            return "Empezando ahora"
        
        # Patr√≥n: n√∫mero + unidad
        match = re.match(r'^(\d+(?:\.\d+)?)\s*([a-zA-Z√±√ë]+)$', text)
        if match:
            number_str, unit = match.groups()
            number = float(number_str) if '.' in number_str else int(number_str)
            
            # Buscar unidad en diccionarios
            normalized_unit = None
            
            # Primero en espa√±ol
            if unit in self.time_units_es:
                normalized_unit = self.time_units_es[unit]
            # Luego en ingl√©s
            elif unit in self.time_units_en:
                normalized_unit = self.time_units_en[unit]
            else:
                # Intentar coincidencias parciales
                for es_key, es_val in self.time_units_es.items():
                    if unit.startswith(es_key) or es_key.startswith(unit):
                        normalized_unit = es_val
                        break
                
                if not normalized_unit:
                    for en_key, en_val in self.time_units_en.items():
                        if unit.startswith(en_key) or en_key.startswith(unit):
                            normalized_unit = en_val
                            break
            
            if normalized_unit:
                # Ajustar singular/plural seg√∫n el n√∫mero
                if number == 1:
                    if normalized_unit in ['d√≠as', 'semanas', 'meses', 'a√±os']:
                        # Convertir a singular
                        singular_map = {
                            'd√≠as': 'd√≠a',
                            'semanas': 'semana', 
                            'meses': 'mes',
                            'a√±os': 'a√±o'
                        }
                        normalized_unit = singular_map.get(normalized_unit, normalized_unit)
                else:
                    # Convertir a plural si es necesario
                    plural_map = {
                        'd√≠a': 'd√≠as',
                        'semana': 'semanas',
                        'mes': 'meses', 
                        'a√±o': 'a√±os'
                    }
                    normalized_unit = plural_map.get(normalized_unit, normalized_unit)
                
                # Formatear n√∫mero (sin decimales innecesarios)
                if isinstance(number, float) and number.is_integer():
                    number = int(number)
                
                return f"{number} {normalized_unit}"
        
        # Patr√≥n: solo n√∫mero (asumimos meses)
        match = re.match(r'^(\d+(?:\.\d+)?)$', text)
        if match:
            number = float(match.group(1)) if '.' in match.group(1) else int(match.group(1))
            if isinstance(number, float) and number.is_integer():
                number = int(number)
            
            unit = "mes" if number == 1 else "meses"
            return f"{number} {unit}"
        
        return None

def parse_training_period(text: str) -> str:
    """
    ‚úÖ Funci√≥n auxiliar para normalizar per√≠odos desde CLI.
    
    Args:
        text: Entrada del usuario
        
    Returns:
        str: Per√≠odo normalizado o texto original si no se puede normalizar
    """
    validator = TrainingPeriodValidator()
    normalized = validator.normalize_period(text)
    return normalized if normalized else text

# ‚úÖ Ejemplos de uso y tests
def test_training_period_validator():
    """Tests para verificar el funcionamiento del validador"""
    validator = TrainingPeriodValidator()
    
    test_cases = [
        # Espa√±ol
        ("2 meses", "2 meses"),
        ("1 mes", "1 mes"),
        ("3 semanas", "3 semanas"),
        ("1 semana", "1 semana"),
        ("2 a√±os", "2 a√±os"),
        ("1 a√±o", "1 a√±o"),
        ("5 d√≠as", "5 d√≠as"),
        ("1 d√≠a", "1 d√≠a"),
        
        # Abreviaciones espa√±ol
        ("2 m", "2 meses"),
        ("1 M", "1 mes"),
        ("3 s", "3 semanas"),
        ("2 a", "2 a√±os"),
        ("5 d", "5 d√≠as"),
        
        # Ingl√©s
        ("2 months", "2 meses"),
        ("1 month", "1 mes"),
        ("3 weeks", "3 semanas"),
        ("1 week", "1 semana"),
        ("2 years", "2 a√±os"),
        ("1 year", "1 a√±o"),
        ("5 days", "5 d√≠as"),
        ("1 day", "1 d√≠a"),
        
        # Abreviaciones ingl√©s
        ("2 mo", "2 meses"),
        ("3 w", "3 semanas"),
        ("2 y", "2 a√±os"),
        
        # Solo n√∫meros (asume meses)
        ("3", "3 meses"),
        ("1", "1 mes"),
        
        # Casos especiales
        ("empezando", "Empezando ahora"),
        ("0 - empezando", "Empezando ahora"),
        ("starting", "Empezando ahora"),
    ]
    
    print("üß™ Testing TrainingPeriodValidator:")
    for input_text, expected in test_cases:
        result = validator.normalize_period(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{input_text}' ‚Üí '{result}' (esperado: '{expected}')")

if __name__ == "__main__":
    test_training_period_validator()